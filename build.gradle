plugins {
	id 'fabric-loom' version '1.10-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"oxide" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

tasks.register('buildRust') {
	doLast {
		exec {
			println("Building rust native windows library...")
			workingDir "$projectDir/src/rust-src"
			commandLine 'cargo', 'build', '--release', '--target=x86_64-pc-windows-gnu'
		}
		exec {
			println("Building rust native linux library...")
			workingDir "$projectDir/src/rust-src"
			commandLine 'cargo', 'build', '--release', '--target=x86_64-unknown-linux-gnu'
		}
	}
}

tasks.register('copyRustLib') {
	dependsOn tasks.named('buildRust')
	doLast {
		copy {
			// Windows
			from("$projectDir/src/rust-src/target/x86_64-pc-windows-gnu/release/oxide_worldgen.dll")
			into("$projectDir/src/main/resources/native/windows")
		}
		copy {
			// Linux
			from("$projectDir/src/rust-src/target/x86_64-unknown-linux-gnu/release/liboxide_worldgen.so")
			into("$projectDir/src/main/resources/native/linux")
		}
	}
}

tasks.named('compileJava') {
	dependsOn tasks.named('copyRustLib')
}

tasks.named('processResources') {
	dependsOn tasks.named('copyRustLib')
}

tasks.named('sourcesJar') {
	dependsOn tasks.named('copyRustLib')
}